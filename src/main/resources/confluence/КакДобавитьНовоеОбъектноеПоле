1) Создаем Entity

    1.1) Объявляем Id, значимые поля.
    1.2) Над связающим полем добавляем аннотацию : @OneToMany(mappedBy = СущностьСвязка_ТекущаяСущность)
        СущностьСвязка_ТекущаяСущность = названию таблицы '@Table(name = "caliber")'
    1.3) Связующее поле объявляем сетом с объектами СущностиСвязки 'private Set<Product> products;'
    1.4) Добавляем Пустой и Полный конструкторы, геттеры сеттеры, туСтринг

************************************************************************************************************************

@Entity
@Table(name = "caliber")
@Component
public class Caliber {

    public static final String CALIBER_ID = "caliber_Id";
    private static final String CALIBER_VALUE = "caliber_value";
    public static final String CALIBER_ENTITY = "caliber";

    @Id
    @GeneratedValue(generator = "increment")
    @GenericGenerator(name = "increment", strategy = "increment")
    @Column(name = CALIBER_ID, length = 8, nullable = false)
    private Long caliber_Id;

    @Column(name = CALIBER_VALUE)
    private String name;

    @OneToMany(mappedBy = PRODUCT_CALIBER)
    private Set<Product> products;

    public Caliber() {
    }

    public Caliber(String name, Set<Product> products) {
        this.name = name;
        this.products = products;
    }

    public Long getCaliber_Id() {
        return caliber_Id;
    }

    public void setCaliber_Id(Long caliber_Id) {
        this.caliber_Id = caliber_Id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Set<Product> getProducts() {
        return products;
    }

    public void setProducts(Set<Product> products) {
        this.products = products;
    }

    @Override
    public String toString() {
        return "Caliber{" +
                "caliber_Id=" + caliber_Id +
                ", name='" + name + '\'' +
                ", products=" + products +
                '}';
    }
}

************************************************************************************************************************

2) Добавляем необходимые поля в СущностьСвязку

    2.1) Поле которое мы использовали в 1.2 'public static final String PRODUCT_CALIBER = "caliber";'
    2.2) Поле объектной сущности с соотвествующими аннотациями
             @JsonIgnore
             @ManyToOne
             @JoinColumn(name = CALIBER_ID, nullable = false)
             private Caliber caliber;
    2.3) Добавляем новое поле в коструктор, делаем геттеры сеттеры, обновляем туСтринг

3) Добавляем обновления в контроллер/ы

************************************************************************************************************************

    @RequestMapping(value = "/guns", method = RequestMethod.GET, headers = "Accept=application/json")
        public List<? super Product> getGunsByParams(
                @RequestParam(value = PRODUCT_CALIBER, required = false) String caliber
        ) {
            return productService.getProductsByParams(
                    returnParams(new HashMap<HttpParameter, String>() {
                        {
                            put(new HttpParameter(PRODUCT_CALIBER, OBJECTSIMPLE_PARAM_TYPE, PARAM_CLASS_STRING,
                            GUN_ENTITY), caliber);
                         }
                    }));
        }

        ************************************************************************************************************************

4) Добавляем поле в маппинги hibernate.cfg-servlet.xml
    В <bean id="sfBean"> в <property name="annotatedClasses">
    Пример : '<value>com.gunmarket.model.Caliber</value>'